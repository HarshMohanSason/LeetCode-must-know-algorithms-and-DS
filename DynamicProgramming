//Dynamic programming basics: 

/*
Dynamic programming is technique used to solve problems with overlapping sub problems and optimal substructure. 

*/

//Two Approaches for this: 

/* 
1. Top-Down approach(Memoization). This approach solves the problem by
breaking the problem into sub problems recursively and caching the results to avoid recomputation
*/

int fib(int n, vector<int>& dp)
{
	if(n <= 1)
	{
		return n;
	}
	if(dp[n] != -1) 
	{
		return dp[n];
	}
	dp[n] = fib(n - 1, dp) + fib(n - 2, dp); 
	return dp[n];
}


/*
2. Bottom Up (Tabulation). Solve sub problems and use their results to build up to the solution to the larger problem. Avoid recursion 
usually and start from small sub problem

*/

int fact(int n)
{	
	vector<int> dp(n + 1, 0); 
	dp[0] = 0; 
	dp[1] = 1; 
	
	for(int i = 2; i<= n; i++)
	{
		dp[i] = dp[i - 1] + dp[i - 2];
	}
	
	return dp[n]

}
